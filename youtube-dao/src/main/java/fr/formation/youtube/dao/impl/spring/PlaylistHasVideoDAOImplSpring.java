/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import fr.formation.youtube.bean.PlaylistHasVideo;
import fr.formation.youtube.dao.PlaylistHasVideoDAO;
import fr.formation.youtube.dao.impl.spring.commons.GenericDAO;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * PlaylistHasVideo DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class PlaylistHasVideoDAOImplSpring extends GenericDAO<PlaylistHasVideo> implements PlaylistHasVideoDAO {

	private final static String SQL_SELECT = 
		"select FK_ID_PLAYLIST, FK_ID_VIDEO from playlist_has_video where FK_ID_PLAYLIST = ? and FK_ID_VIDEO = ?";


	private final static String SQL_INSERT = 
		"insert into playlist_has_video ( FK_ID_PLAYLIST, FK_ID_VIDEO ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"NO UPDATE (NO DATA)";

	private final static String SQL_DELETE = 
		"delete from playlist_has_video where FK_ID_PLAYLIST = ? and FK_ID_VIDEO = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from playlist_has_video";

	private final static String SQL_COUNT = 
		"select count(*) from playlist_has_video where FK_ID_PLAYLIST = ? and FK_ID_VIDEO = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public PlaylistHasVideoDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public PlaylistHasVideo find( Integer fkIdPlaylist, Integer fkIdVideo ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdVideo };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean load( PlaylistHasVideo playlistHasVideo ) {
		return super.doSelect(playlistHasVideo) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public void insert(PlaylistHasVideo playlistHasVideo) {
		super.doInsert(playlistHasVideo);
	}	


    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( Integer fkIdPlaylist, Integer fkIdVideo ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdVideo };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( PlaylistHasVideo playlistHasVideo ) {
		return super.doDelete(playlistHasVideo);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( Integer fkIdPlaylist, Integer fkIdVideo ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdVideo };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( PlaylistHasVideo playlistHasVideo ) {
		return super.doExists(playlistHasVideo);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(PlaylistHasVideo playlistHasVideo)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			playlistHasVideo.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasVideo.getFkIdVideo()  // "FK_ID_VIDEO" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(PlaylistHasVideo playlistHasVideo) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			playlistHasVideo.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasVideo.getFkIdVideo()  // "FK_ID_VIDEO" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(PlaylistHasVideo playlistHasVideo)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			playlistHasVideo.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasVideo.getFkIdVideo()  // "FK_ID_VIDEO" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<PlaylistHasVideo> getRowMapper(PlaylistHasVideo o)  {
		//--- RowMapper to populate the given bean instance
		return new PlaylistHasVideoRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<PlaylistHasVideo> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new PlaylistHasVideoRowMapper( new PlaylistHasVideo() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param playlistHasVideo
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, PlaylistHasVideo playlistHasVideo) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		playlistHasVideo.setFkIdPlaylist(rs.getInt("FK_ID_PLAYLIST")); // java.lang.Integer
		if ( rs.wasNull() ) { playlistHasVideo.setFkIdPlaylist(null); }; // not primitive number => keep null value if any
		playlistHasVideo.setFkIdVideo(rs.getInt("FK_ID_VIDEO")); // java.lang.Integer
		if ( rs.wasNull() ) { playlistHasVideo.setFkIdVideo(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class PlaylistHasVideoRowMapper implements RowMapper<PlaylistHasVideo> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final PlaylistHasVideo bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		PlaylistHasVideoRowMapper(PlaylistHasVideo bean) {
			this.bean = bean ;
		}
		
		@Override
		public PlaylistHasVideo mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
