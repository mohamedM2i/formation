/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;

import fr.formation.youtube.bean.PlaylistHasAudio;
import fr.formation.youtube.dao.PlaylistHasAudioDAO;
import fr.formation.youtube.dao.impl.spring.commons.GenericDAO;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * PlaylistHasAudio DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class PlaylistHasAudioDAOImplSpring extends GenericDAO<PlaylistHasAudio> implements PlaylistHasAudioDAO {

	private final static String SQL_SELECT = 
		"select FK_ID_PLAYLIST, FK_ID_AUDIO from playlist_has_audio where FK_ID_PLAYLIST = ? and FK_ID_AUDIO = ?";


	private final static String SQL_INSERT = 
		"insert into playlist_has_audio ( FK_ID_PLAYLIST, FK_ID_AUDIO ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"NO UPDATE (NO DATA)";

	private final static String SQL_DELETE = 
		"delete from playlist_has_audio where FK_ID_PLAYLIST = ? and FK_ID_AUDIO = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from playlist_has_audio";

	private final static String SQL_COUNT = 
		"select count(*) from playlist_has_audio where FK_ID_PLAYLIST = ? and FK_ID_AUDIO = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public PlaylistHasAudioDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public PlaylistHasAudio find( Integer fkIdPlaylist, Integer fkIdAudio ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdAudio };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean load( PlaylistHasAudio playlistHasAudio ) {
		return super.doSelect(playlistHasAudio) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public void insert(PlaylistHasAudio playlistHasAudio) {
		super.doInsert(playlistHasAudio);
	}	


    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( Integer fkIdPlaylist, Integer fkIdAudio ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdAudio };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( PlaylistHasAudio playlistHasAudio ) {
		return super.doDelete(playlistHasAudio);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( Integer fkIdPlaylist, Integer fkIdAudio ) {
		Object[] primaryKey = new Object[] { fkIdPlaylist, fkIdAudio };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( PlaylistHasAudio playlistHasAudio ) {
		return super.doExists(playlistHasAudio);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(PlaylistHasAudio playlistHasAudio)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			playlistHasAudio.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasAudio.getFkIdAudio()  // "FK_ID_AUDIO" : java.lang.Integer
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(PlaylistHasAudio playlistHasAudio) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			playlistHasAudio.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasAudio.getFkIdAudio()  // "FK_ID_AUDIO" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(PlaylistHasAudio playlistHasAudio)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			playlistHasAudio.getFkIdPlaylist() , // "FK_ID_PLAYLIST" : java.lang.Integer
			playlistHasAudio.getFkIdAudio()  // "FK_ID_AUDIO" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<PlaylistHasAudio> getRowMapper(PlaylistHasAudio o)  {
		//--- RowMapper to populate the given bean instance
		return new PlaylistHasAudioRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<PlaylistHasAudio> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new PlaylistHasAudioRowMapper( new PlaylistHasAudio() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param playlistHasAudio
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, PlaylistHasAudio playlistHasAudio) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		playlistHasAudio.setFkIdPlaylist(rs.getInt("FK_ID_PLAYLIST")); // java.lang.Integer
		if ( rs.wasNull() ) { playlistHasAudio.setFkIdPlaylist(null); }; // not primitive number => keep null value if any
		playlistHasAudio.setFkIdAudio(rs.getInt("FK_ID_AUDIO")); // java.lang.Integer
		if ( rs.wasNull() ) { playlistHasAudio.setFkIdAudio(null); }; // not primitive number => keep null value if any
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class PlaylistHasAudioRowMapper implements RowMapper<PlaylistHasAudio> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final PlaylistHasAudio bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		PlaylistHasAudioRowMapper(PlaylistHasAudio bean) {
			this.bean = bean ;
		}
		
		@Override
		public PlaylistHasAudio mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
