/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao;

import java.sql.SQLException;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.formation.youtube.bean.Utilisateur;
import fr.formation.youtube.dao.commons.DAOProvider;
import fr.formation.youtube.dao.commons.DAOTestUtil;

/**
 * JUnit tests for UtilisateurDAO
 * 
 * @author Telosys Tools
 *
 */
public class UtilisateurDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE utilisateur ("
			+ "ID_UTILISATEUR,"
			+ "NOM_UTILISATEUR VARCHAR(45) ,"
			+ "PRENOM_UTILISATEUR VARCHAR(45) ,"
			+ "ADRESSE_UTILISATEUR VARCHAR(255) ,"
			+ "CODE_POSTAL_UTILISATEUR VARCHAR(5) ,"
			+ "VILLE_UTILISATEUR VARCHAR(45) ,"
			+ "PRIMARY KEY(ID_UTILISATEUR)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test UtilisateurDAO ");
    	UtilisateurDAO dao = DAOProvider.getDAO(UtilisateurDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Utilisateur utilisateur = new Utilisateur();
		//--- Key values
		// Auto-incremented key : nothing to set in the Primary Key
		//--- Other values
		utilisateur.setNomUtilisateur("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "NOM_UTILISATEUR" : java.lang.String
		utilisateur.setPrenomUtilisateur("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "PRENOM_UTILISATEUR" : java.lang.String
		utilisateur.setAdresseUtilisateur("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "ADRESSE_UTILISATEUR" : java.lang.String
		utilisateur.setCodePostalUtilisateur("AAAAA"); // "CODE_POSTAL_UTILISATEUR" : java.lang.String
		utilisateur.setVilleUtilisateur("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "VILLE_UTILISATEUR" : java.lang.String

    	//--- INSERT
    	System.out.println("Insert : " + utilisateur );
    	Integer pkAutoIncr = dao.insert(utilisateur);
    	utilisateur.setIdUtilisateur( pkAutoIncr );
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(utilisateur) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Utilisateur utilisateur2 = dao.find(pkAutoIncr);
    	Assert.assertNotNull(utilisateur2);
    	Assert.assertTrue( dao.exists(utilisateur2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		utilisateur2.setNomUtilisateur("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "NOM_UTILISATEUR" : java.lang.String
		utilisateur2.setPrenomUtilisateur("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "PRENOM_UTILISATEUR" : java.lang.String
		utilisateur2.setAdresseUtilisateur("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "ADRESSE_UTILISATEUR" : java.lang.String
		utilisateur2.setCodePostalUtilisateur("BBBBB"); // "CODE_POSTAL_UTILISATEUR" : java.lang.String
		utilisateur2.setVilleUtilisateur("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "VILLE_UTILISATEUR" : java.lang.String
    	System.out.println("Update : " + utilisateur2 );
    	Assert.assertTrue( dao.update(utilisateur2) == 1 );
    	
    	//--- LOAD
    	Utilisateur utilisateur3 = new Utilisateur();
    	utilisateur3.setIdUtilisateur( pkAutoIncr );
    	Assert.assertTrue( dao.load(utilisateur3) );
    	System.out.println("Loaded : " + utilisateur3 );
		Assert.assertEquals(utilisateur2.getNomUtilisateur(), utilisateur3.getNomUtilisateur() ); 
		Assert.assertEquals(utilisateur2.getPrenomUtilisateur(), utilisateur3.getPrenomUtilisateur() ); 
		Assert.assertEquals(utilisateur2.getAdresseUtilisateur(), utilisateur3.getAdresseUtilisateur() ); 
		Assert.assertEquals(utilisateur2.getCodePostalUtilisateur(), utilisateur3.getCodePostalUtilisateur() ); 
		Assert.assertEquals(utilisateur2.getVilleUtilisateur(), utilisateur3.getVilleUtilisateur() ); 


    	utilisateur3.setIdUtilisateur(300);
    	Assert.assertFalse( dao.load(utilisateur3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + utilisateur2 );
    	Assert.assertTrue( dao.delete(utilisateur2) == 1 );
    	Assert.assertTrue( dao.delete(utilisateur2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(utilisateur2) ) ;
    	utilisateur2 = dao.find(100);
    	Assert.assertNull( utilisateur2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
