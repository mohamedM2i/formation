/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao;

import java.sql.SQLException;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.formation.youtube.bean.Video;
import fr.formation.youtube.dao.commons.DAOProvider;
import fr.formation.youtube.dao.commons.DAOTestUtil;

/**
 * JUnit tests for VideoDAO
 * 
 * @author Telosys Tools
 *
 */
public class VideoDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE video ("
			+ "ID_VIDEO IDENTITY AUTO_INCREMENT NOT NULL,"
			+ "NOM_VIDEO VARCHAR(45) ,"
			+ "PRIMARY KEY(ID_VIDEO)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test VideoDAO ");
    	VideoDAO dao = DAOProvider.getDAO(VideoDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Video video = new Video();
		//--- Key values
		// Auto-incremented key : nothing to set in the Primary Key
		//--- Other values
		video.setNomVideo("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "NOM_VIDEO" : java.lang.String

    	//--- INSERT
    	System.out.println("Insert : " + video );
    	Integer pkAutoIncr = dao.insert(video);
    	video.setIdVideo( pkAutoIncr );
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(video) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Video video2 = dao.find(pkAutoIncr);
    	Assert.assertNotNull(video2);
    	Assert.assertTrue( dao.exists(video2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		video2.setNomVideo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "NOM_VIDEO" : java.lang.String
    	System.out.println("Update : " + video2 );
    	Assert.assertTrue( dao.update(video2) == 1 );
    	
    	//--- LOAD
    	Video video3 = new Video();
    	video3.setIdVideo( pkAutoIncr );
    	Assert.assertTrue( dao.load(video3) );
    	System.out.println("Loaded : " + video3 );
		Assert.assertEquals(video2.getNomVideo(), video3.getNomVideo() ); 


    	video3.setIdVideo(300);
    	Assert.assertFalse( dao.load(video3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + video2 );
    	Assert.assertTrue( dao.delete(video2) == 1 );
    	Assert.assertTrue( dao.delete(video2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(video2) ) ;
    	video2 = dao.find(100);
    	Assert.assertNull( video2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
