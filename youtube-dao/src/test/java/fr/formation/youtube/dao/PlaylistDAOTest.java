/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao;

import java.sql.SQLException;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.formation.youtube.bean.Playlist;
import fr.formation.youtube.dao.commons.DAOProvider;
import fr.formation.youtube.dao.commons.DAOTestUtil;

/**
 * JUnit tests for PlaylistDAO
 * 
 * @author Telosys Tools
 *
 */
public class PlaylistDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE playlist ("
			+ "ID_PLAYLIST,"
			+ "FK_ID_UTILISATEUR INTEGER NOT NULL,"
			+ "NOM_PLAYLIST VARCHAR(45) ,"
			+ "PRIMARY KEY(ID_PLAYLIST)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test PlaylistDAO ");
    	PlaylistDAO dao = DAOProvider.getDAO(PlaylistDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Playlist playlist = new Playlist();
		//--- Key values
		// Auto-incremented key : nothing to set in the Primary Key
		//--- Other values
		playlist.setFkIdUtilisateur(100); // "FK_ID_UTILISATEUR" : java.lang.Integer
		playlist.setNomPlaylist("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "NOM_PLAYLIST" : java.lang.String

    	//--- INSERT
    	System.out.println("Insert : " + playlist );
    	Integer pkAutoIncr = dao.insert(playlist);
    	playlist.setIdPlaylist( pkAutoIncr );
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(playlist) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Playlist playlist2 = dao.find(pkAutoIncr);
    	Assert.assertNotNull(playlist2);
    	Assert.assertTrue( dao.exists(playlist2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		playlist2.setFkIdUtilisateur(200); // "FK_ID_UTILISATEUR" : java.lang.Integer
		playlist2.setNomPlaylist("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "NOM_PLAYLIST" : java.lang.String
    	System.out.println("Update : " + playlist2 );
    	Assert.assertTrue( dao.update(playlist2) == 1 );
    	
    	//--- LOAD
    	Playlist playlist3 = new Playlist();
    	playlist3.setIdPlaylist( pkAutoIncr );
    	Assert.assertTrue( dao.load(playlist3) );
    	System.out.println("Loaded : " + playlist3 );
		Assert.assertEquals(playlist2.getFkIdUtilisateur(), playlist3.getFkIdUtilisateur() ); 
		Assert.assertEquals(playlist2.getNomPlaylist(), playlist3.getNomPlaylist() ); 


    	playlist3.setIdPlaylist(300);
    	Assert.assertFalse( dao.load(playlist3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + playlist2 );
    	Assert.assertTrue( dao.delete(playlist2) == 1 );
    	Assert.assertTrue( dao.delete(playlist2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(playlist2) ) ;
    	playlist2 = dao.find(100);
    	Assert.assertNull( playlist2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
