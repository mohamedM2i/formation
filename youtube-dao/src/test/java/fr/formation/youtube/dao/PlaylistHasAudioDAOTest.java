/*
 * Created on 17 Nov 2016 ( Time 21:47:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.formation.youtube.dao;

import java.sql.SQLException;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.formation.youtube.bean.PlaylistHasAudio;
import fr.formation.youtube.dao.commons.DAOProvider;
import fr.formation.youtube.dao.commons.DAOTestUtil;

/**
 * JUnit tests for PlaylistHasAudioDAO
 * 
 * @author Telosys Tools
 *
 */
public class PlaylistHasAudioDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE playlist_has_audio ("
			+ "FK_ID_PLAYLIST INTEGER NOT NULL,"
			+ "FK_ID_AUDIO INTEGER NOT NULL,"
			+ "PRIMARY KEY(FK_ID_PLAYLIST,FK_ID_AUDIO)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test PlaylistHasAudioDAO ");
    	PlaylistHasAudioDAO dao = DAOProvider.getDAO(PlaylistHasAudioDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	PlaylistHasAudio playlistHasAudio = new PlaylistHasAudio();
		//--- Key values
		playlistHasAudio.setFkIdPlaylist(100); // "FK_ID_PLAYLIST" : java.lang.Integer
		playlistHasAudio.setFkIdAudio(100); // "FK_ID_AUDIO" : java.lang.Integer
		//--- Other values

    	//--- INSERT
    	System.out.println("Insert : " + playlistHasAudio );
    	dao.insert(playlistHasAudio);
    	Assert.assertTrue( dao.exists(100, 100) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(playlistHasAudio) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	PlaylistHasAudio playlistHasAudio2 = dao.find(100, 100);
    	Assert.assertNotNull(playlistHasAudio2);
		Assert.assertTrue( playlistHasAudio2.getFkIdPlaylist() == 100  ) ;
		Assert.assertTrue( playlistHasAudio2.getFkIdAudio() == 100  ) ;
    	Assert.assertTrue( dao.exists(playlistHasAudio2) ) ;
    	
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
    	
    	//--- LOAD
    	PlaylistHasAudio playlistHasAudio3 = new PlaylistHasAudio();
    	playlistHasAudio3.setFkIdPlaylist(100);
    	playlistHasAudio3.setFkIdAudio(100);
    	Assert.assertTrue( dao.load(playlistHasAudio3) );
    	System.out.println("Loaded : " + playlistHasAudio3 );


    	playlistHasAudio3.setFkIdPlaylist(300);
    	playlistHasAudio3.setFkIdAudio(300);
    	Assert.assertFalse( dao.load(playlistHasAudio3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + playlistHasAudio2 );
    	Assert.assertTrue( dao.delete(playlistHasAudio2) == 1 );
    	Assert.assertTrue( dao.delete(playlistHasAudio2) == 0 );
    	Assert.assertTrue( dao.delete(100, 100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100, 100) ) ;
    	Assert.assertFalse( dao.exists(playlistHasAudio2) ) ;
    	playlistHasAudio2 = dao.find(100, 100);
    	Assert.assertNull( playlistHasAudio2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
